{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quasar Engine (PD) Programmer's Docoment","text":"<p>This document is the official Quasar Engine documentation. Visit Quick Start section for your first Quasar Project setup and build.</p>"},{"location":"#platforms","title":"Platforms","text":"<p><code>Quasar Engine</code> is designed to be cross compatable between <code>Windows</code>, <code>Mac</code> and <code>Linux</code>. A single Codebase is managed for all three of these platforms. On Windows and Linux native implementation of <code>Vulkan</code> is used, while on Mac the Metal translation layer <code>MoltenVK</code> is used.</p>"},{"location":"#environment-setup","title":"Environment Setup","text":"Windows <ul> <li><code>Visual Studio</code> - Visual Studio C++ devkit for Windows platform.</li> <li><code>CMake</code> - CMake is a coss platform C++ build tool.</li> <li><code>Vulkan</code> - Graphics and compute API Vulkan SDK. </li> </ul> <p>Clone GitHub repo and with CMake run build. Make sure to clone the repo <code>recursively</code>.</p>"},{"location":"#quasar-dev-layout","title":"Quasar Dev Layout","text":"<pre><code>QuasarEngine\n|-Quasar                        # Engine dynamic library\n|   |-Include\n|   |-src\n|   |   |-Containers\n|   |   |-Core\n|   |   |-Editor\n|   |   |-Event\n|   |   |-Math\n|   |   |-Memory\n|   |   |-Resources\n|   |   |-Platform\n|   |   |-Renderer\n|   |   |-Systems\n|   |-Vendor\n|-Editor                        # User executable application (currently editor gui defined inside engine)\n|   |-src\n|-Assets\n|   |-fonts\n|   |-materials\n|   |-models\n|   |-textures\n|   |-shaders\n|-Project                       # User application, hot reload of user code\n|   |-src\n</code></pre>"},{"location":"Quasar/Include/EntryPoint/","title":"EntryPoint","text":"<p><code>Quasar</code> <code>class</code> <code>QS_API</code> <pre><code>Quasar/Include/EntryPoint.h\n</code></pre></p> Author <p>Rounak Paul</p> <p>Dated: 19th August 2024</p> <p>Abstract</p> <p>Hosts the main() function. The extern function CreateApplication() is called to create an app and call its run() function. </p>"},{"location":"Quasar/Include/EntryPoint/#methods","title":"Methods","text":""},{"location":"Quasar/Include/EntryPoint/#main","title":"main","text":"<p><code>main</code></p> <pre><code>int main(int argc, char** argv)\n</code></pre> InputOutputInfo <p>cpp main application inputs</p> <p>error code of the application run </p> <p>the entrry point for the cpp program</p> <p>Tip</p> <pre><code>int main(int argc, char** argv) {\n    auto app = Quasar::CreateApplication(); // allocates and returns new application\n    app-&gt;run();\n    delete app;\n\n    return 0;\n}\n</code></pre>"},{"location":"Quasar/Vendor/vendors/","title":"Vendor","text":"<p>Vendors</p>"},{"location":"Quasar/src/Defines/","title":"Defines","text":"<p><code>typedef</code> <code>define</code></p> <pre><code>Quasar/src/Core/Defines.h\n</code></pre> Author <p>Rounak Paul</p> <p>Dated: 19th March 2024</p>"},{"location":"Quasar/src/Defines/#types","title":"Types","text":"<p>Important</p> <p>Use the following defined types in Quasar Engine to avoid varying size of types from compiler to compiler. The following have been static asserted to have the expected size. This size is very important to avoid unknown behavours in varipus modules like Renderer or Event system. </p> <p>Unsigned int types</p> Quasar symbol typedef u8 unsigned char u16 unsigned short u32 unsigned int u64 unsigned long long <p>Signed int types</p> Quasar symbol typedef i8 signed char i16 signed short i32 signed int i64 signed long long <p>Floating point types</p> Quasar symbol typedef f32 float f64 double <p>Boolean types</p> Quasar symbol typedef b32 int b8 bool"},{"location":"Quasar/src/Defines/#defines_1","title":"Defines","text":"<pre><code>#define TRUE true\n</code></pre> <pre><code>#define FALSE false\n</code></pre> <pre><code>#define INVALID_ID_U64 18446744073709551615UL\n</code></pre> <pre><code>#define INVALID_ID 4294967295U\n</code></pre> <pre><code>#define INVALID_ID_U16 65535U\n</code></pre> <pre><code>#define INVALID_ID_U8 255U\n</code></pre> <p>Windows</p> <pre><code>// API export\n#define QS_API __declspec(dllexport)\n\n// API import\n#define QS_API __declspec(dllimport)\n</code></pre> <p>Mac &amp; Linux</p> <pre><code>// API export\n#define QS_API __attribute__((visibility(\"default\")))\n\n// API import\n#define QS_API\n</code></pre> <pre><code>// Clamp\n#define QS_CLAMP(value, min, max) ((value &lt;= min) ? min : (value &gt;= max) ? max : value)\n</code></pre> <pre><code>// Min\n#define QS_MIN(x, y) (x &lt; y ? x : y)\n</code></pre> <pre><code>// Max\n#define QS_MAX(x, y) (x &gt; y ? x : y)\n</code></pre> <pre><code>#define GIBIBYTES(amount) (amount * 1024 * 1024 * 1024)\n</code></pre> <pre><code>#define MEBIBYTES(amount) (amount * 1024 * 1024)\n</code></pre> <pre><code>#define KIBIBYTES(amount) (amount * 1024)\n</code></pre> <pre><code>#define GIGABYTES(amount) (amount * 1000 * 1000 * 1000)\n</code></pre> <pre><code>#define MEGABYTES(amount) (amount * 1000 * 1000)\n</code></pre> <pre><code>#define KILOBYTES(amount) (amount * 1000)\n</code></pre> <pre><code>QS_INLINE u64 get_aligned(u64 operand, u64 granularity) {\n    return ((operand + (granularity - 1)) &amp; ~(granularity - 1));\n}\n</code></pre> <pre><code>QS_INLINE range get_aligned_range(u64 offset, u64 size, u64 granularity) {\n    return range{get_aligned(offset, granularity), get_aligned(size, granularity)};\n}\n</code></pre>"},{"location":"Quasar/src/Core/Application/","title":"class QS_API Application","text":"<p><code>Quasar</code> <code>class</code> <code>QS_API</code> <pre><code>Quasar/src/Core/Application.h\n</code></pre></p> Author <p>Rounak Paul</p> <p>Dated: 19th March 2024</p> <p>Abstract</p> <p>Quasar::Application is the <code>singleton</code> object responsible for the following:</p> <ul> <li>Init Quasar Engine and maintain app_state, main window,is_running, clock and dt. </li> <li>Hosts the main application loop. This is where the main event poling is done. </li> <li>Shutdown the Quasar Engine on exit. Issue commands to release memory, physical decice and safely shutdown the engine.</li> </ul>"},{"location":"Quasar/src/Core/Application/#methods","title":"Methods","text":""},{"location":"Quasar/src/Core/Application/#get_instance","title":"get_instance","text":"<p><code>public</code> <code>static</code></p> <pre><code>static Application&amp; get_instance()\n</code></pre> InputOutputInfo <p>None</p> <p>Application instance reference. </p> <p>Get reference to the singleton Quasar Application instance</p> <p>Tip</p> <p>Use the macro <code>QS_APPLICATION</code> to get the refence to the singleton Application instance.</p> <pre><code>#define QS_APPLICATION Application::get_instance()\n</code></pre>"},{"location":"Quasar/src/Core/Application/#get_main_window","title":"get_main_window","text":"<p><code>public</code></p> <pre><code>Window&amp; get_main_window()\n</code></pre> InputOutputInfo <p>None</p> <p>Reference to the Main window used by singleton Application. </p> <p>Get reference to the main window used by the Engine.</p> <p>Tip</p> <p>Use the macro <code>QS_MAIN_WINDOW</code> to get the refence to the window used by main Application.</p> <pre><code>#define QS_MAIN_WINDOW QS_APPLICATION.get_main_window()\n</code></pre>"},{"location":"Quasar/src/Core/Application/#get_app_state","title":"get_app_state","text":"<p><code>public</code></p> <pre><code>app_state&amp; get_app_state()\n</code></pre> InputOutputInfo <p>None</p> <p>Reference to the Application state managed by the Engine. </p> <p>This state is created and passed to the engine at the time of Application creation. During runtime the state is modified and used by Application</p> <p>Tip</p> <p>Use the macro <code>QS_APP_STATE</code> to get the refence to the Application state.</p> <pre><code>#define QS_APP_STATE QS_APPLICATION.get_app_state()\n</code></pre>"},{"location":"Quasar/src/Core/Application/#get_editor_camera","title":"get_editor_camera","text":"<p><code>public</code></p> <pre><code>Camera&amp; get_editor_camera()\n</code></pre> InputOutputInfo <p>None</p> <p>Reference to the Editor Camera instance. </p> <p>Editor Camera is to be active during editor mode. For project's runtime editor camera will not be available</p>"},{"location":"Quasar/src/Core/Application/#run","title":"run","text":"<p><code>public</code></p> <pre><code>void run();\n</code></pre> InputOutputInfo <p>None</p> <p>Void</p> <p>Hosts the main application loop.</p>"},{"location":"Quasar/src/Core/Identifier/","title":"Identifier","text":"<p><code>Quasar</code> <pre><code>Quasar/src/Core/Identifier.h\n</code></pre></p> Author <p>Rounak Paul</p> <p>Dated: 19th August 2024</p> <p>Abstract</p> <p>Identifier provides ID for owner. Here owwner can be any object. </p>"},{"location":"Quasar/src/Core/Identifier/#methods","title":"Methods","text":""},{"location":"Quasar/src/Core/Identifier/#identifier_aquire_new_id","title":"identifier_aquire_new_id","text":"<p><code>QS_API</code></p> <pre><code>u32 identifier_aquire_new_id(void* owner)\n</code></pre> InputOutputInfo <p>owner The owner of the identifier.</p> <p>The new identifier. </p> <p>Acquires a new identifier for the given owner.</p>"},{"location":"Quasar/src/Core/Identifier/#identifier_release_id","title":"identifier_release_id","text":"<p><code>QS_API</code></p> <pre><code>void identifier_release_id(u32 id)\n</code></pre> InputOutputInfo <p>id The identifier to be released.</p> <p>void </p> <p>Releases the given identifier, which can then be used again.</p>"},{"location":"Quasar/src/Core/Input/","title":"class QS_API Input : public System","text":"<p><code>Quasar</code> <code>class</code> <code>QS_API</code> <pre><code>Quasar/src/Core/Input.h\n</code></pre></p> Author <p>Rounak Paul</p> <p>Dated: 19th March 2024</p> <p>Abstract</p> <p>Quasar::Input is the interface for input event handlers. Quasar Engine is using GLFW events to listen to input events.</p>"},{"location":"Quasar/src/Core/Input/#methods","title":"Methods","text":""},{"location":"Quasar/src/Core/Input/#init","title":"init","text":"<p><code>public</code></p> <pre><code>virtual b8 init(void* config) override\n</code></pre> InputOutputInfo <p>None</p> <p>true if input event handlers were set to GLFW Key and Mouse callbacks successfully </p> <p>Set glfwSetKeyCallback() and glfwSetMouseButtonCallback()</p>"},{"location":"Quasar/src/Core/Input/#shutdown","title":"shutdown","text":"<p><code>public</code></p> <pre><code>virtual void shutdown() override\n</code></pre> InputOutputInfo <p>None</p> <p>void </p> <p>Does nothing currently</p>"},{"location":"Quasar/src/Core/Input/#get_key_state","title":"get_key_state","text":"<p><code>public</code></p> <pre><code>QS_INLINE b32 get_key_state(KeyCode key)\n</code></pre> InputOutputInfo <p>key KeyCode for the key's state</p> <p>0: key is released 1: key is pressed 2: key is held down</p> <p>Index into the Input System's keys array to get the current state of the KeyCode</p>"},{"location":"Quasar/src/Core/Input/#get_mbtn_state","title":"get_mbtn_state","text":"<p><code>public</code></p> <pre><code>QS_INLINE b32 get_mbtn_state(MouseCode btn)\n</code></pre> InputOutputInfo <p>btn MouseCode for the Mouse btn's state</p> <p>0: key is released 1: key is pressed 2: key is held down (this may not be working currently)</p> <p>Index into the Input System's mouse_state to get the current state of the MouseCode</p>"},{"location":"Quasar/src/Core/Input/#get_mousex","title":"get_mouseX","text":"<p><code>public</code></p> <pre><code>f64 get_mouseX()\n</code></pre> InputOutputInfo <p>None</p> <p>float MouseX </p> <p>position of the mouse cursor in a coordinate system originating from the top left of the window, right is positive X axis</p>"},{"location":"Quasar/src/Core/Input/#get_mousey","title":"get_mouseY","text":"<p><code>public</code></p> <pre><code>f64 get_mouseY()\n</code></pre> InputOutputInfo <p>None</p> <p>float MouseY </p> <p>position of the mouse cursor in a coordinate system originating from the top left of the window, bottom is positive Y axis</p>"},{"location":"Quasar/src/Core/Input/#get_mousexdt","title":"get_mouseXDT","text":"<p><code>public</code></p> <pre><code>f64 get_mouseXDT()\n</code></pre> InputOutputInfo <p>None</p> <p>float delta MouseX since last frame </p> <p>holds previous mouse pos and calculates delta</p>"},{"location":"Quasar/src/Core/Input/#get_mouseydt","title":"get_mouseYDT","text":"<p><code>public</code></p> <pre><code>f64 get_mouseYDT()\n</code></pre> InputOutputInfo <p>None</p> <p>float delta MouseY since last frame  </p> <p>holds previous mouse pos and calculates delta</p>"},{"location":"Quasar/src/Core/Input/#is_key_pressed","title":"is_key_pressed","text":"<p><code>private</code> <code>static</code></p> <pre><code>static void is_key_pressed(GLFWwindow* window, int key, int scancode, int action, int mods)\n</code></pre> InputOutputInfo <ul> <li>GLFWwindow* window - Pointer to the Main GLFW window object</li> <li>int key - keycode of the keyboard key press event</li> <li>int scancode - N/A</li> <li>int action - N/A</li> <li>int mods - N/A</li> </ul> <p>void </p> <p>glfw callback function sets <code>context.data.u16[0] = key</code> and Executes event <code>QS_EVENT.Execute(action ? EVENT_CODE_KEY_PRESSED : EVENT_CODE_KEY_RELEASED, 0, context)</code>  with the context.</p>"},{"location":"Quasar/src/Core/Input/#is_mousebtn_pressed","title":"is_mousebtn_pressed","text":"<p><code>private</code> <code>static</code></p> <pre><code>static void is_mousebtn_pressed(GLFWwindow* window, int button, int action, int mods);\n</code></pre> InputOutputInfo <ul> <li>GLFWwindow* window - Pointer to the Main GLFW window object</li> <li>int button - mouse button of the mouse key press event</li> <li>int action - N/A</li> <li>int mods - N/A</li> </ul> <p>void </p> <p>glfw callback function sets <code>context.data.u16[0] = button</code> and Executes event <code>QS_EVENT.Execute(action ? EVENT_CODE_BUTTON_PRESSED : EVENT_CODE_BUTTON_RELEASED, 0, context)</code>  with the context.</p>"},{"location":"Quasar/src/Core/Keycodes/","title":"Keycodes","text":"<p><code>Quasar</code> <pre><code>Quasar/src/Core/Keycodes.h\n</code></pre></p> Author <p>Rounak Paul</p> <p>Dated: 19th March 2024</p> <p>Abstract</p> <p>Quasar::Keycodes to be used in Keyboard events in Quasar Engine.</p>"},{"location":"Quasar/src/Core/Keycodes/#enumeration","title":"Enumeration","text":""},{"location":"Quasar/src/Core/Keycodes/#mousecode","title":"MouseCode","text":"<pre><code>// From glfw3.h\nQS_MBTN_0                = 0,\nQS_MBTN_1                = 1,\nQS_MBTN_2                = 2,\nQS_MBTN_3                = 3,\nQS_MBTN_4                = 4,\nQS_MBTN_5                = 5,\nQS_MBTN_6                = 6,\nQS_MBTN_7                = 7,\n\nQS_MBTN_LAST             = QS_MBTN_7,\nQS_MBTN_LEFT             = QS_MBTN_0,\nQS_MBTN_RIGHT            = QS_MBTN_1,\nQS_MBTN_MIDDLE           = QS_MBTN_2\n</code></pre>"},{"location":"Quasar/src/Core/Keycodes/#keycodes_1","title":"KeyCodes","text":"<pre><code>// From glfw3.h\nDEFINE_KEY(SPACE               , 32),\nDEFINE_KEY(APOSTROPHE          , 39), /* ' */\nDEFINE_KEY(COMMA               , 44), /* , */\nDEFINE_KEY(MINUS               , 45), /* - */\nDEFINE_KEY(PERIOD              , 46), /* . */\nDEFINE_KEY(SLASH               , 47), /* / */\n\nDEFINE_KEY(D0                  , 48), /* 0 */\nDEFINE_KEY(D1                  , 49), /* 1 */\nDEFINE_KEY(D2                  , 50), /* 2 */\nDEFINE_KEY(D3                  , 51), /* 3 */\nDEFINE_KEY(D4                  , 52), /* 4 */\nDEFINE_KEY(D5                  , 53), /* 5 */\nDEFINE_KEY(D6                  , 54), /* 6 */\nDEFINE_KEY(D7                  , 55), /* 7 */\nDEFINE_KEY(D8                  , 56), /* 8 */\nDEFINE_KEY(D9                  , 57), /* 9 */\n\nDEFINE_KEY(SEMICOLON           , 59), /* ; */\nDEFINE_KEY(EQUAL               , 61), /* = */\n\nDEFINE_KEY(A                   , 65),\nDEFINE_KEY(B                   , 66),\nDEFINE_KEY(C                   , 67),\nDEFINE_KEY(D                   , 68),\nDEFINE_KEY(E                   , 69),\nDEFINE_KEY(F                   , 70),\nDEFINE_KEY(G                   , 71),\nDEFINE_KEY(H                   , 72),\nDEFINE_KEY(I                   , 73),\nDEFINE_KEY(J                   , 74),\nDEFINE_KEY(K                   , 75),\nDEFINE_KEY(L                   , 76),\nDEFINE_KEY(M                   , 77),\nDEFINE_KEY(N                   , 78),\nDEFINE_KEY(O                   , 79),\nDEFINE_KEY(P                   , 80),\nDEFINE_KEY(Q                   , 81),\nDEFINE_KEY(R                   , 82),\nDEFINE_KEY(S                   , 83),\nDEFINE_KEY(T                   , 84),\nDEFINE_KEY(U                   , 85),\nDEFINE_KEY(V                   , 86),\nDEFINE_KEY(W                   , 87),\nDEFINE_KEY(X                   , 88),\nDEFINE_KEY(Y                   , 89),\nDEFINE_KEY(Z                   , 90),\n\nDEFINE_KEY(LEFTBRACKET         , 91),  /* [ */\nDEFINE_KEY(BACKSLASH           , 92),  /* \\ */\nDEFINE_KEY(RIGHTBRACKET        , 93),  /* ] */\nDEFINE_KEY(GRAVEACCENT         , 96),  /* ` */\n\nDEFINE_KEY(WORLD1              , 161), /* non-US #1 */\nDEFINE_KEY(WORLD2              , 162), /* non-US #2 */\n\n/* Function keys */\nDEFINE_KEY(ESCAPE              , 256),\nDEFINE_KEY(ENTER               , 257),\nDEFINE_KEY(TAB                 , 258),\nDEFINE_KEY(BACKSPACE           , 259),\nDEFINE_KEY(INSERT              , 260),\nDEFINE_KEY(DELETE              , 261),\nDEFINE_KEY(RIGHT               , 262),\nDEFINE_KEY(LEFT                , 263),\nDEFINE_KEY(DOWN                , 264),\nDEFINE_KEY(UP                  , 265),\nDEFINE_KEY(PAGEUP              , 266),\nDEFINE_KEY(PAGEDOWN            , 267),\nDEFINE_KEY(HOME                , 268),\nDEFINE_KEY(END                 , 269),\nDEFINE_KEY(CAPSLOCK            , 280),\nDEFINE_KEY(SCROLLLOCK          , 281),\nDEFINE_KEY(NUMLOCK             , 282),\nDEFINE_KEY(PRINTSCREEN         , 283),\nDEFINE_KEY(PAUSE               , 284),\nDEFINE_KEY(F1                  , 290),\nDEFINE_KEY(F2                  , 291),\nDEFINE_KEY(F3                  , 292),\nDEFINE_KEY(F4                  , 293),\nDEFINE_KEY(F5                  , 294),\nDEFINE_KEY(F6                  , 295),\nDEFINE_KEY(F7                  , 296),\nDEFINE_KEY(F8                  , 297),\nDEFINE_KEY(F9                  , 298),\nDEFINE_KEY(F10                 , 299),\nDEFINE_KEY(F11                 , 300),\nDEFINE_KEY(F12                 , 301),\nDEFINE_KEY(F13                 , 302),\nDEFINE_KEY(F14                 , 303),\nDEFINE_KEY(F15                 , 304),\nDEFINE_KEY(F16                 , 305),\nDEFINE_KEY(F17                 , 306),\nDEFINE_KEY(F18                 , 307),\nDEFINE_KEY(F19                 , 308),\nDEFINE_KEY(F20                 , 309),\nDEFINE_KEY(F21                 , 310),\nDEFINE_KEY(F22                 , 311),\nDEFINE_KEY(F23                 , 312),\nDEFINE_KEY(F24                 , 313),\nDEFINE_KEY(F25                 , 314),\n\n/* Keypad */\nDEFINE_KEY(KP0                 , 320),\nDEFINE_KEY(KP1                 , 321),\nDEFINE_KEY(KP2                 , 322),\nDEFINE_KEY(KP3                 , 323),\nDEFINE_KEY(KP4                 , 324),\nDEFINE_KEY(KP5                 , 325),\nDEFINE_KEY(KP6                 , 326),\nDEFINE_KEY(KP7                 , 327),\nDEFINE_KEY(KP8                 , 328),\nDEFINE_KEY(KP9                 , 329),\nDEFINE_KEY(KPDECIMAL           , 330),\nDEFINE_KEY(KPDIVIDE            , 331),\nDEFINE_KEY(KPMULTIPLY          , 332),\nDEFINE_KEY(KPSUBTRACT          , 333),\nDEFINE_KEY(KPADD               , 334),\nDEFINE_KEY(KPENTER             , 335),\nDEFINE_KEY(KPEQUAL             , 336),\n\nDEFINE_KEY(LEFTSHIFT           , 340),\nDEFINE_KEY(LEFTCONTROL         , 341),\nDEFINE_KEY(LEFTALT             , 342),\nDEFINE_KEY(LEFTSUPER           , 343),\nDEFINE_KEY(RIGHTSHIFT          , 344),\nDEFINE_KEY(RIGHTCONTROL        , 345),\nDEFINE_KEY(RIGHTALT            , 346),\nDEFINE_KEY(RIGHTSUPER          , 347),\nDEFINE_KEY(MENU                , 348)\n</code></pre>"},{"location":"Quasar/src/Core/Log/","title":"Log","text":"<p><code>Quasar</code> <code>class</code> <code>QS_API</code> <pre><code>Quasar/src/Core/Log.h\n</code></pre></p> Author <p>Rounak Paul</p> <p>Dated: 19th March 2024</p> <p>Abstract</p> <p>Quasar::Log is the logging pipeline for Quasar Engine and Any application using this Engine. Logging has been enabled via some <code>defines</code> to easily be able to put logs to this pipeline.  This generates a Log file in the root directory of the runtime. This log is also displayed in the Editor's UI</p>"},{"location":"Quasar/src/Core/Log/#defines","title":"Defines","text":""},{"location":"Quasar/src/Core/Log/#quasar-core-logger","title":"Quasar Core Logger","text":"<p>Info</p> <p>Core logger is to be used in the devlopment of Quasar Engine Dynamic Library.</p> <p>usage examples</p> <ul> <li> <p>QS_CORE_FATAL     <pre><code>QS_CORE_FATAL(\"fatal event! code %d\", fatal_code)\n</code></pre></p> </li> <li> <p>QS_CORE_ERROR     <pre><code>QS_CORE_ERROR(\"error event! code %s\", __line__)\n</code></pre></p> </li> <li> <p>QS_CORE_WARN     <pre><code>QS_CORE_WARN(\"warning event! value %d not expected\", value) \n</code></pre></p> </li> <li> <p>QS_CORE_INFO     <pre><code>QS_CORE_INFO(\"Vulkan supported GPUs found %d\", device_count)\n</code></pre></p> </li> <li> <p>QS_CORE_DEBUG     <pre><code>QS_CORE_DEBUG(\"Created main window!\")\n</code></pre></p> </li> <li> <p>QS_CORE_TRACE     <pre><code>QS_CORE_TRACE(\"FPS: %f\", 1/dt)\n</code></pre></p> </li> </ul>"},{"location":"Quasar/src/Core/Log/#quasar-application-logger","title":"Quasar Application Logger","text":"<p>Info</p> <p>App logger is to be used in the devlopment of editor or any games created with Quasar Engine.</p> <p>usage examples</p> <ul> <li> <p>QS_APP_FATAL     <pre><code>QS_APP_FATAL(\"fatal event! code %d\", fatal_code)\n</code></pre></p> </li> <li> <p>QS_APP_ERROR     <pre><code>QS_APP_ERROR(\"error event! code %s\", __line__)\n</code></pre></p> </li> <li> <p>QS_APP_WARN     <pre><code>QS_APP_WARN(\"warning event! value %d not expected\", value) \n</code></pre></p> </li> <li> <p>QS_APP_INFO     <pre><code>QS_APP_INFO(\"Vulkan supported GPUs found %d\", device_count)\n</code></pre></p> </li> <li> <p>QS_APP_DEBUG     <pre><code>QS_APP_DEBUG(\"Created main window!\")\n</code></pre></p> </li> <li> <p>QS_APP_TRACE     <pre><code>QS_APP_TRACE(\"FPS: %f\", 1/dt)\n</code></pre></p> </li> </ul>"},{"location":"Quasar/src/Core/SystemManager/","title":"class QS_API SystemManager","text":"<p><code>Quasar</code> <code>class</code> <code>QS_API</code> <pre><code>Quasar/src/Core/SystemManager.h\n</code></pre></p> Author <p>Rounak Paul</p> <p>Dated: 19th August 2024</p> <p>Abstract</p> <p>Quasar::SystemManager is the <code>singleton</code> object responsible for the following:</p> <ul> <li>Create and manage all system's states in Quasar Engine</li> <li>Register system to a state array, Unregister system with id</li> <li>Provide access to the system states with defines</li> </ul>"},{"location":"Quasar/src/Core/SystemManager/#methods","title":"Methods","text":""},{"location":"Quasar/src/Core/SystemManager/#init","title":"init","text":"<p><code>public</code> <code>static</code></p> <pre><code>static b8 init()\n</code></pre> InputOutputInfo <p>None</p> <p>true if the system manager is successfully initialized </p> <p>gurentees the SystemManager is a singleton class allocates the state array</p>"},{"location":"Quasar/src/Core/SystemManager/#shutdown","title":"shutdown","text":"<p><code>public</code></p> <pre><code>void shutdown()\n</code></pre> InputOutputInfo <p>None</p> <p>void </p> <p>cleans up any remaining registered systems and free the state array</p>"},{"location":"Quasar/src/Core/SystemManager/#get_instance","title":"get_instance","text":"<p><code>public</code> <code>static</code></p> <pre><code>static SystemManager&amp; get_instance()\n</code></pre> InputOutputInfo <p>None</p> <p>reference to the SystemManager instance </p> <p>...</p> <p>Tip</p> <p>Use the macro <code>QS_SYSTEM_MANAGER</code> to get the refence to the singleton SystemManager instance.</p> <pre><code>#define QS_SYSTEM_MANAGER SystemManager::get_instance()\n</code></pre>"},{"location":"Quasar/src/Core/SystemManager/#systems-defines","title":"Systems &amp; Defines","text":"<p>System manager provides <code>defines</code> to access the Systems managed by it. </p> <p><pre><code>#define QS_EVENT (*(Event*)QS_SYSTEM_MANAGER.get_system(SYSTEM_EVENT))\n</code></pre> <pre><code>#define QS_INPUT (*(Input*)QS_SYSTEM_MANAGER.get_system(SYSTEM_INPUT))\n</code></pre> <pre><code>#define QS_RESOURCE_SYSTEM (*(ResourceSystem*)QS_SYSTEM_MANAGER.get_system(SYSTEM_RESOURCE))\n</code></pre> <pre><code>#define QS_SHADER_SYSTEM (*(ShaderSystem*)QS_SYSTEM_MANAGER.get_system(SYSTEM_SHADER))\n</code></pre> <pre><code>#define QS_RENDERER_API (*(Renderer::API*)QS_SYSTEM_MANAGER.get_system(SYSTEM_RENDERER))\n</code></pre> <pre><code>#define QS_JOB_SYSTEM (*(JobSystem*)QS_SYSTEM_MANAGER.get_system(SYSTEM_JOB))\n</code></pre> <pre><code>#define QS_TEXTURE_SYSTEM (*(TextureSystem*)QS_SYSTEM_MANAGER.get_system(SYSTEM_TEXTURE))\n</code></pre> <pre><code>#define QS_FONT_SYSTEM (*(FontSystem*)QS_SYSTEM_MANAGER.get_system(SYSTEM_FONT))\n</code></pre> <pre><code>#define QS_MATERIAL_SYSTEM (*(MaterialSystem*)QS_SYSTEM_MANAGER.get_system(SYSTEM_MATERIAL))\n</code></pre> <pre><code>#define QS_RENDER_VIEW_SYSTEM (*(RenderViewSystem*)QS_SYSTEM_MANAGER.get_system(SYSTEM_RENDER_VIEW))\n</code></pre> <pre><code>#define QS_GEOMETRY_SYSTEM (*(GeometrySystem*)QS_SYSTEM_MANAGER.get_system(SYSTEM_GEOMETRY))\n</code></pre> <pre><code>#define QS_WATCH_SYSTEM (*(Watcher*)QS_SYSTEM_MANAGER.get_system(SYSTEM_WATCHER))\n</code></pre> <pre><code>#define QS_LIGHT_SYSTEM (*(LightSystem*)QS_SYSTEM_MANAGER.get_system(SYSTEM_LIGHT))\n</code></pre></p>"}]}